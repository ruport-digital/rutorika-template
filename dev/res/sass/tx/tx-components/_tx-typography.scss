// Font-face

@mixin tx-font-family($family) {
  $familyNorm: txf-str-replace(#{$family}, ' ');
  $familyExtend: #{'%'}font-#{$familyNorm};
  @extend #{$familyExtend};
}

@mixin tx-font-face(
  $family,
  $filename,
  $variants,
  $extensions,
  $append: false,
  $base: false
) {
  $familyNorm: txf-str-replace(#{$family}, ' ');
  @each $variant, $name in $variants {
    @font-face {
      @include tx-font-variant($variant);
      font-family: '#{$family}';
      @if map-has-key($extensions, eot) {
        src: url('../fonts/#{$familyNorm}/#{$filename}-#{$name}.eot');
      }
      src: txf-font-face-format($extensions, $familyNorm, $filename, $name);
    }
  }

  $extend: #{'%'}font-#{$familyNorm};
  $loaded: font-#{$familyNorm}-is-loaded;

  @if ($base) {
    .#{$loaded} {
      font-family: unquote('"' + $family + '"' + txf-appended-stack($append));
    }
  }

  #{$extend} {
    .#{$loaded} & {
      font-family: unquote('"' + $family + '"' + txf-appended-stack($append));
    }
  }
}

@mixin tx-font-variant($variant) {
  @if $variant == bold {
    font-weight: bold;
    font-style: normal;
  } @else if $variant == italic {
    font-weight: normal;
    font-style: italic;
  } @else if $variant == bolditalic {
    font-weight: bold;
    font-style: italic;
  } @else if type-of($variant) == number {
    $string: inspect($variant);
    $dashIndex: str-index($string, '-');
    @if type-of($dashIndex) == number {
      $weight: str-slice($string, 0, $dashIndex - 1);
      $style: str-slice($string, $dashIndex + 1);
      font-weight: $weight;
      font-style: $style;
    } @else {
      font-weight: $variant;
      font-style: normal;
    }
  } @else {
    font-weight: normal;
    font-style: normal;
  }
}

// Font Rendering

@mixin tx-font-rendering($rendering: null) {
  @if ($rendering == thin) {
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
  } @else {
    -moz-osx-font-smoothing: auto;
    -webkit-font-smoothing: auto;
  }
}

// Font Size

@mixin tx-font-size($newFontSize, $lines: approx, $fallback: $remFallback) {
  $size: 0;
  @if type-of($newFontSize) == number {
    $size: $newFontSize;
  } @else {
    $size: map-get($fontSizes, $newFontSize);
  }
  @if $fallback == true {
    font-size: $size;
  }
  font-size: txf-relative($size, $fontSize, 'rem');
  @if $lines != none and $lines != approx and $lines != 0 {
    line-height: ($lines * $lineHeight) * ($fontSize / $size);
  }
  @if $lines == 0 {
    line-height: 0;
  }
  @if $lines == approx {
    line-height: ($lineHeight * ceil($size / ($fontSize * $lineHeight))) *
      ($fontSize / $size);
  }
}

// Responsive Typography

@mixin tx-responsive-typo() {
  :root {
    font-size: calc(1vw + 1vh + 0.5vmin);
  }
}

// Hyphens

@mixin tx-hyphens($hyphens: manual) {
  -epub-hyphens: $hyphens;
  -webkit-hyphens: $hyphens;
  -moz-hyphens: $hyphens;
  hyphens: $hyphens;
}

// Functions

@function txf-str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      txf-str-replace(
        str-slice($string, $index + str-length($search)),
        $search,
        $replace
      );
  }
  @return $string;
}

@function txf-font-face-format($extensions, $familyNorm, $filename, $name) {
  $result: '';
  @each $extension, $format in $extensions {
    $comma: '';
    @if $result == '' {
      $comma: '';
    } @else {
      $comma: ', ';
    }
    @if $extension == eot {
      $result: #{$result}#{$comma}#{url('../fonts/#{$familyNorm}/#{$filename}-#{$name}.#{$extension}?#iefix')
        format('#{$format}')};
    } @else {
      $result: #{$result}#{$comma}#{url('../fonts/#{$familyNorm}/#{$filename}-#{$name}.#{$extension}')
        format('#{$format}')};
    }
  }
  @return $result;
}

@function txf-appended-stack($append) {
  @return if($append, unquote(', ' + $fontFamily), '');
}
